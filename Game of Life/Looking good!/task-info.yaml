type: edu
custom_name: stage4
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage4Test;

    public class GameOfLifeTest extends GameOfLifeStage4Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/Sprawdzarka.java
  visible: true
  text: |
    package life;

    public class Sprawdzarka {
        public static boolean isNWAlibe(char[][] world, int i, int j) {
            if (i != 0) {
                if (j != 0) {
                    if (world[i - 1][j - 1] == 'O') {
                        return true;
                    }
                } else {
                    if (world[i - 1][world[0].length - 1] == 'O') {
                        return true;
                    }
                }
            } else {
                if (j != 0) {
                    if (world[world.length - 1][j - 1] == 'O') {
                        return true;
                    }
                } else {
                    if (world[world.length - 1][world[0].length - 1] == 'O') {
                        return true;
                    }
                }

            }
            return false;
        }

        public static boolean isNEAlive(char[][] world, int i, int j) {
            if (i != 0) {
                if (j != world[0].length - 1) {
                    if (world[i - 1][j + 1] == 'O') {
                        return true;
                    }
                } else {
                    if (world[i - 1][0] == 'O') {
                        return true;
                    }
                }
            } else {
                if (j != world[0].length - 1) {
                    if (world[world.length - 1][j + 1] == 'O') {
                        return true;
                    }
                } else {
                    if (world[world.length - 1][0] == 'O')
                        return true;
                }
            }
            return false;
        }

        public static boolean isSWAlive(char[][] world, int i, int j) {
            if (i != world.length - 1) {
                if (j != 0) {
                    if (world[i + 1][j - 1] == 'O') {
                        return true;
                    }

                } else {
                    if (world[i + 1][world[0].length - 1] == 'O') {
                        return true;
                    }
                }

            } else {
                if (j != 0) {
                    if (world[0][j - 1] == 'O') {
                        return true;
                    }
                } else {
                    if (world[0][world[0].length - 1] == 'O') {
                        return true;
                    }
                }
            }
            return false;
        }

        public static boolean isSEAlive(char[][] world, int i, int j) {
            if (i != world.length - 1) {
                if (j != world[0].length - 1) {
                    if (world[i + 1][j + 1] == 'O') {
                        return true;
                    }
                } else {
                    if (world[i + 1][0] == 'O') {
                        return true;
                    }
                }

            } else {
                if (j != world[0].length - 1) {
                    if (world[0][j + 1] == 'O') {
                        return true;
                    }
                } else {
                    if (world[0][0] == 'O') {
                        return true;
                    }
                }
            }
            return false;
        }

        public static boolean isNAlive(char[][] world, int i, int j) {
            if (i != 0) {
                if (world[i - 1][j] == 'O') {
                    return true;
                }
            } else {
                if (world[world.length - 1][j] == 'O') {
                    return true;
                }
            }
            return false;
        }

        public static boolean isSAlive(char[][] world, int i, int j) {
            if (i != world.length - 1) {
                if (world[i + 1][j] == 'O') {
                    return true;
                }
            } else {
                if (world[0][j] == 'O') {
                    return true;
                }
            }
            return false;
        }

        public static boolean isWAlive(char[][] world, int i, int j) {
            if (j != 0) {
                if (world[i][j - 1] == 'O') {
                    return true;
                }
            } else {
                if (world[i][world[0].length - 1] == 'O') {
                    return true;
                }
            }
            return false;
        }

        public static boolean isEAlive(char[][] world, int i, int j) {
            if (j != world[0].length - 1) {
                if (world[i][j + 1] == 'O') {
                    return true;
                }
            } else {
                if (world[i][0] == 'O') {
                    return true;
                }
            }
            return false;
        }

    //    public static boolean isAlive(char[][] world, int i, int i1) {
    //        for (int i = 0; i < world.length; i++) {
    //            for (int j = 0; j < world[0].length; j++) {
    //
    //            }
    //        }
    //        return true;
    //    }

        public static void copy(char[][] world, char[][] output) {
            for (int i = 0; i < world.length; i++) {
                for (int j = 0; j < world[0].length; j++) {
                    world[i][j] = output[i][j];
                }
            }
        }

        public static char[][] n(char[][] world) {
            char[][] poprzednia = new char[world.length][world[0].length];
            for (int i = 0; i < world.length; i++) {
                System.arraycopy(world[i], 0, poprzednia[i], 0, world[i].length);
            }
            return poprzednia;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/298/implement
status: Unchecked
record: -1
